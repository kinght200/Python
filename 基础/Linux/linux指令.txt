软件管理相关的命令：

Debian平台代表作--Ubuntu
相关命令：
dpkg：用来安装离线安装包，不会字典安装依赖
apt：可以离线或者在线安装软件，并且会指定安装依赖
.deb:基于Debian平台的软件安装包

Fedora平台代表作--CentOS
相关命令：
rpm：用来安装离线安装包，不会字典安装依赖
yum：可以离线或者在线安装软件，并且会指定安装依赖
.rpm:基于Fedora平台的软件安装包


安装软件的三种方式：
1.下载离线安装包--dpkg/rpm
2.直接在线安装--apt/yum
3.把代码的源代码下载下来，然后编译安装。下载.tgz源代码文件，是一个压缩包，相当于windows里的zip/rar

CentOS软件安装相关的命令：
rpm:
rpm -ivh <包名.rpm> 不会自动安装依赖，一般会失败
rpm -aq 列出安装的所有包
rpm -e<包名> 删除指定的包 一般也不会卸载成功，不会自动删除依赖

yum:
yum install <包名.rpm>
yum list installed 列出已经安装的软件
yum remove 移除指定的软件
yum check-update 显示更新

Linux的目录结构：
根目录: /
bin: 存放的是二进制文件，都是一些可执行的命令
etc: 用来存储配置信息，重要，我们会修改
home: 用来存放用户的家目录。创建一个用户时，会在这里创建一个和用户同名的文件夹，用来存放用户的信息。
root: root用户的家目录
sbin: 超级用户命令存放的目录
usr: 非常重要的目录，用来存放用户安装的应用程序和用户文件


创建用户chris，设置密码，并把用户添加到root分组
1.创建用户：
sudo useradd chris -m -s /bin/bash
2.设置密码
sudo passwd chris
3.把用户添加到root分组
sudo gpasswd -a chirs root
4.使用finallshell，用chris用户登录服务器

cd(change directory,修改目录) 命令的使用：
    1. ~：表示的是当前洪湖的家目录
        当前用户的家目录： 普通用户是在 /home/用户名
                        root用户是在 /root
    2. -：表示跳转到上一次的目录
    3. ../：表示跳转到上一级的目录
    4. 空：等价于 ~ ，表示跳转到当前用户的家目录

pwd(print work directory,打印工作目录)：看一下当前在哪个文件夹下执行命令

路径分为相对路径和绝对路径
    相对路径：相对于当前文件夹的路径。不以 / 开始就是相对路径
        cd xxx  # 进入到当前文件夹里的 xxx 文件夹
        cd ./xxx    # 等价于 cd xxx
        cd ../xxx   # 进入到上一级文件夹，再在这个文件夹里进入到 xxx

    绝对路径：   以 / 开始的接收绝对路径
        cd /home/xxx    # 从根目录开始查找 home，进入到home里的 xxx

ls 命令列出文件和文件夹(不包含隐藏的文件和文件夹)
    隐藏文件或者文件夹：以 . 开头的文件或者文件夹时隐藏文件
    ls:列出当前目录下的文件和文件夹
    -a : 列出当前目录下的所有文件和文件夹(包括隐藏的)

    -l : 列出文件夹的详细信息 (drwxrexr-x 2 chris chris 4096 3月 10 14:48 ddd)
        drwxrexr-x:
            第一个字母表示文件的类型：
                d : 表示是给文件夹
                - : 表示它是一个普通文件
                l : 表示一个链接(快捷方式)
        rwxrwxr-x:  (表示权限，九个字母，三个一组，分别表示所有者，所属组和其他的权限)
            r : 读取
            w : 写入
            x : 执行权限
            - : 没有权限

        2: 如果是一个文件夹，表示这个文件夹里有几个子文件夹
           如果是一个文件，表示表示文件硬链接的个数

        chris: 表示所有者
        chris: 表示所有者所属的组
        4096:文件夹显示的都是4096，文件显示文件的大小
        3月 10 14:48 ：文件(夹)最后一次修改的时间
        ddd : 文件(夹)的名字

    -h : 使用更加贴近人类识别的格式显示，以KMGT形式显示

命令的别名：
    alias : 用来查看别名
    alias la='ls -a':给 ls -a 起了给别名；如果在控制台里直接输入，是临时的，终端关闭以后，别名就没有了

文件的创建删除以及复制移动：
    mkdir:用来创建文件夹
        -p:用来创建多级目录(mkdir -p ddd/ppp/xxx)

    touch:用来创建一个空的文件
    rmdir:移除一个空文件夹，如果文件夹不为空会报错
    rm -rf:用来移除文件或者文件夹
        r:递归删除
        f:强制删除
    cp:用来复制一个文件(夹)。cp 源文件 目标文件
    mv:用来移动一个文件(夹)

查看文件相关的命令：
    cat:从上到下，查看文件所有的内容
    tac:从下到上，查看文件所有的内容
    head -n:查看前n行的数据,默认是十行
    tail -n:查看后n行的数据，默认是十行
    wc:用来统计个数
    nl:带行号的显示所有内容
    more:用来显示一屏，查看完毕以后，自动退出
    less:用来显示一屏，查看完毕以后，不会自动退出，需要输入q退出

vim的使用：
    vim是一个文件编辑工具，相当于记事本。第一步应该安装这个软件，yum install vim
    vim filename 使用vim打开一个文件用来编辑
    vim有三种模式:
        命令模式:默认是命令模式，只能接收命令，不能输入内容---
            shift + z + z:保存并退出
            dd:用来删除一行数据，ndd用来删除n行数据
            u:撤销
            ctrl+r:反撤销
            yy:复制一行数据，nyy:用来复制n行数据
            p:粘贴数据
            G:定位到最后一行
            gg:定位到第一行，ngg:定位到第n行
            $:定位到这一行的末尾
            0 / ^ :定位到这一行的最前面
            x:删除光标右边的一个文字， nx表示删除光标右边的n个文字
            X:删除光标左边的一个文字，nX表示删除光标左边的n个文字

        插入模式：在这个模式下才能够写入内容，想要退出，必须要按ESC进入到命令模式才能退出
            i:进入到插入模式
            I:在第一个非空字符插入
            a:在光标的右侧插入数据
            A:在光标所在行的结尾插入
            s:删除光标所在位置的文字，并插入内容
            S:删除光标所在行的文字，并插入内容
            o:在光标所在行的下一行插入数据
            O:在光标所在行的上一行插入数据

        底线命令模式(需要按ESC键进入到命令模式，然后再按:进入到命令模式)
            w:保存
            q:退出
            wq:保存并退出，等价于命令模式下的shift+z+z
            e!:放弃之前的修改
            n:光标定位到第n行
            set nu:显示行号
            / (内容):用来查找，n下一个匹配，N上一个匹配
            %s/原内容/新内容[/g]--默认会替换每一行第一次匹配到的数据,/g是全部替换

    vim的配置文件：
        /etc/vimrc:所有的用户都能读取到这个配置
        -/.vimrc:只有当前用户才能读取到这个配置

linux配置文件：
    /etc/bashrc文件-----把alias md='mkdri'命令写在了 /etc/bashrc文件里，重新连接终端以后，依然可以使用命令，无论使用哪个用户，都会自动执行/etc/bashrc
    /.bashrc文件-----只有当前用户登录时，才会执行这个里的命令
    每次打开终端，都会自动执行配置文件里的代码

用户管理相关的命令：

    whoami：查看当前登录的用户

    useradd<用户名>：用来新建一个用户
    -m：创建用户的家目录，会在/home文件夹下创建一个和用户名同名的文件夹
    -d：指定用户的家目录，一般情况下不要指定
    -M：不创建家目录
    -s：指定用户登陆时的shell解析脚本一般指定 /bin/bash
    useradd tony -m -s /bin/bash

    userdel：删除用户的命令
    -f：强制删除
    -r：删除用户的家目录

    passwd 用来设置密码：
    passwd <用户名>：用来给用户设置密码
    passwd ：给当前用户设置密码

    sudo ：使用root用户的权限执行命令，chris不在sudoers文件中，此事将被报告。
    解决方案：
        1.直接修改sudoers文件
            - 使用 vim /etc/sudoers 文件，给chris添加root权限
            - 使用 visudo 命令来修改 /etc/sudoers文件
        2.将用户添加到有权限的组里
            - Ubuntu: sodu组/ admin组
            - CentOS: wheel组

    使用：
    su <用户名>,可以切换到指定的用户
    root用户可以切换到任何用户，不需要密码
    su 或者 su - :切换到 root 用户

    用户组的概念：
    当我们创建一个用户的同时，会自动创建和它同名的分组
    groups:查看当前用户所在的分组
        groups:查看当前用户所在的分组
        groups chris:查看chris用户所在的分组
    gpasswd:用来将用户添加到一个分组，或者从一个分组里删除
        -a <用户名> <组名> : 将用户添加到对应的分组里面
        -d <用户名> <组名> : 将用户从对应的组里删除

    用户和组相关的一些文件：
        /etc/passwd ==> 列出了系统里所有的用户
        /etc/shadow ==> 保存了用户的密码信息(加密)
        /etc/group ==> 保存了分组相关的信息

    压缩解压命令：
        zip压缩：
            zip <压缩包名> <被压缩文件名> ==> 压缩
            unzip <压缩包名> ==> 解压缩
            可以对文件夹进行压缩
        gzip压缩：
            gzip <文件名> ==> 会把原来的文件替换成为 <文件名>.gz
            gunzip <文件名>.gz ==> 把文件解压替换成为 <文件名>
            -k : 可以保留原有的数据
            -r : 递归压缩文件夹里的每一个文件
        bzip2压缩：
            用法和gzip基本一致
            不能压缩文件夹

        Linux里常见的压缩格式 .zip .tgz .tbz

        tar: 打包命令，不会对内容进行压缩，反而还会变大
        三种模式：最多只能出现一个参数
            -c : 打包
            -x : 拆包
            -t : 不拆包，查看内容
        -f : 指定文件
        -v : 查看过程
        -z : 使用gzip压缩解压
            tar -zcvf test.tgz test ==> 将test文件夹使用gip压缩方式，压缩成 test.tgz 文件
            tar -zxvf tets.tgz ==> 使用gzip方式解压
        -j : 使用bzip2压缩解压
            tar -jcvf test.tbz test ==> 将test文件夹使用bizp2压缩方式，压缩成 test.tbz 文件
            tar -jxvf test.tbz ==> 使用bizp2方式解压

    nginx的安装和配置(了解)
        使用yum在线安装：
            1.sudo yum install nginx 安装
            2.sudo systemctl start nginx 启动服务
            3.ps -aux|grep nginx 查看服务器启动了没
            4.客户端就可以在浏览器里通过ip地址直接访问到服务器
        配置文件存放路径：
            1.whereis nginx: 查找和 nginx相关的文件
            2.在 /etc/nginx 文件夹下面存放了nginx的配置信息
            3.在这个配置文件里，有两个配置很重要
                listen 80 default_sever ==> 设置监听的端口
                root /usr/share/nginx/html ==> 静态页面的存放路径

        使用下载源码安装：
            1.使用 wget 下载源代码
            2.使用tar命令解压缩
            3.进入到解压后的文件夹，执行 ./configure --prefix = /usr/local/nginx命令，开始配置nginx. --prefix指定nginx的安装目录
            4.在执行 configure 文件时，可能会报错，此时需要安装第三方的依赖包，安装依赖包以后，重新执行 configure 文件(需要的依赖包自行百度)
            5.此时会生成一个 Makefile 文件
            6.执行 sudo make 命令，然后执行 sudo make install;或者 sudo make&&sudo make install
            7.进入到 /usr/local/nginx/sbin目录，执行sudo./nginx 启动nginx
        配置文件存放路径：都在 /usr/local/nginx这个文件夹下

    服务监听：
    ps -aux:查看后台服务

    管道和重定向：
        管道 ==> | : 把上一个命令的标准输出作为下一个命令的标准输入
        重定向:
            方式:
                > : 把执行结果重定向到一个指定的文件
                >> : 把执行结果追加到一个文件
            分类:
                标准输出 : > 默认就是重定向标准输出
                错误输出 : 2> 将命令执行出错的结果重定向
                全部输出 : &> 把所有的输出都重定向
        多个命令：
            cmd1:cmd2 ==> 执行完成第一个命令以后，紧接着执行下一个命令
            cmd1 || cmd2 ==> 如果前面的执行成功了，后面的命令就不再执行了；前面的命令执行失败以后，才能会执行后面的命令
            cmd && cmd2 ==> 前面的命令执行成果以后，才会执行后面的命令；如果前面的命令执行失败，后面的命令就不再执行

shell编程：
    就是把命令写到一个文件里
    运行脚本文件的方式：
        bash test.sh
        source test.sh
        ./test.sh 如果要以此种方式执行一个脚本，这个脚本必须要有可执行权限